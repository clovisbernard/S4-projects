pipeline {
    agent any

    options {
        buildDiscarder(logRotator(numToKeepStr: '20'))
        disableConcurrentBuilds()
        timeout(time: 60, unit: 'MINUTES')
        timestamps()
    }

    stages {
        stage('SonarQube analysis') {
          agent {
            docker {
              image 'sonarsource/sonar-scanner-cli:4.7.0'
            }
          }
          environment {
            CI = 'true'
            //  scannerHome = tool 'Sonar' bbb
            scannerHome = '/opt/sonar-scanner'
          }
          steps {
            withSonarQubeEnv('Sonar') {
              sh "${scannerHome}/bin/sonar-scanner"
            }
          }
        }

        stage('Quality Gate') {
          steps {
            timeout(time: 1, unit: 'HOURS') {
              waitForQualityGate abortPipeline: true
            }
          }
        }

        stage('Docker Login') {
          steps {
            script {
                // Set your Docker Hub credentials
                def dockerHubCredentials = credentials('your-docker-hub-credentials-id') // Replace with your credentials ID

                if (dockerHubCredentials == null) {
                error('Docker Hub credentials not found')
                }

                // Log in to Docker Hub
                def dockerLogin = bat(script: "docker login -u ${dockerHubCredentials.username} -p ${dockerHubCredentials.password} -e ${dockerHubCredentials.email} https://index.docker.io/v1/", returnStatus: true)

                if (dockerLogin != 0) {
                error('Docker login failed')
                }
            }
          }
        }

        stage('Build auth') {
          steps {
            // log in to Docker hub
            sh '''
                    cd auth
                    docker build -t devopseasylearning/s4-pipeline-auth:${BUILD_NUMBER} .
                    cd -
                    '''
          }
        }

        stage('push auth') {
          steps {
            // log in to Docker hub
            sh '''
                    docker push devopseasylearning/s4-clovis-auth:${BUILD_NUMBER}
                    '''
          }
        }

        stage('Build DB') {
          steps {
            // log in to Docker hub .......
            sh '''
                    cd db
                    docker build -t devopseasylearning/s4-pipeline-db:${BUILD_NUMBER} .
                    cd -
                    '''
          }
        }

        stage('push DB') {
          steps {
            // log in to Docker hub
            sh '''
                    docker push devopseasylearning/s4-clovis-db:${BUILD_NUMBER}
                    '''
          }
        }

        stage('Build UI') {
          steps {
            // log in to Docker hub
            sh '''
                    cd UI
                    docker build -t devopseasylearning/s4-pipeline-UI:${BUILD_NUMBER} .
                    cd -
                    '''
          }
        }

        stage('push UI') {
          steps {
            // log in to Docker hub
            sh '''
                    docker push devopseasylearning/s4-clovis-UI:${BUILD_NUMBER}
                    '''
          }
        }

        stage('Build weather') {
          steps {
            // log in to Docker hub
            sh '''
                    cd weather
                    docker build -t devopseasylearning/s4-pipeline-weather:${BUILD_NUMBER} .
                    cd -
                    '''
          }
        }

        stage('push weather') {
          steps {
            // log in to Docker hub
            sh '''
                    docker push devopseasylearning/s4-clovis-weather:${BUILD_NUMBER}
                    '''
          }
        }
        stage('update charts') {
          steps {
        script {
              sh '''
              cd ${WORKSPACE}/charts/wetaherapp-auth
              cat << EOF > output.txt.
              image:
                repository: devopseasylearning/s4-pipeline-auth
                tag: "${BUILD_NUMBER} "
              EOF

              cd ${WORKSPACE}/charts/wetaherapp-mysql
              cat << EOF > output.txt.
              image:
                repository: devopseasylearning/s4-pipeline-db
                tag: "${BUILD_NUMBER} "
              EOF

              cd ${WORKSPACE}/charts/wetaherapp-UI
              cat << EOF > output.txt.
              image:
                repository: devopseasylearning/s4-pipeline-UI
                tag: "${BUILD_NUMBER} "
              EOF

              cd ${WORKSPACE}/charts/wetaherapp-weather
              cat << EOF > output.txt.
              image:
                repository: devopseasylearning/s4-pipeline-weather
                tag: "${BUILD_NUMBER} "
              EOF

              '''
        }
          }
        }
    post {
        success {
        slackSend(channel: '#development-alerts', color: 'good', message: "SUCCESSFUL: Application S4-PIPELINE  Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.BUILD_URL})")
        }

        unstable {
        slackSend(channel: '#development-alerts', color: 'warning', message: "UNSTABLE: Application S4-PIPELINE  Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.BUILD_URL})")
        }

        failure {
        slackSend(channel: '#development-alerts', color: '#FF0000', message: "FAILURE: Application S4-PIPELINE Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.BUILD_URL})")
        }

        cleanup {
        deleteDir()
        }
    }
    }
}

